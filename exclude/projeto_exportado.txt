--------------------------------------------------------------------------------
ARQUIVO: .env
--------------------------------------------------------------------------------
CLOUDINARY_CLOUD_NAME=<value>
CLOUDINARY_API_KEY=<value>
CLOUDINARY_API_SECRET=<value>

--------------------------------------------------------------------------------
ARQUIVO: pyproject.toml
--------------------------------------------------------------------------------
[tool.poetry]
name = "sistema-alfa-montagem"
version = "0.1.0"
description = ""
authors = ["jeffers <jeffersonlima5286@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.13"
django = "^5.2.3"
django-rest-framework = "^0.1.0"
djangorestframework-simplejwt = "^5.5.0"
python-decouple = "^3.8"
cloudinary = "^1.44.1"
django-cloudinary-storage = "^0.3.0"
pillow = "^11.2.1"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


--------------------------------------------------------------------------------
ARQUIVO: poetry.toml
--------------------------------------------------------------------------------
[virtualenvs]
in-project = true


--------------------------------------------------------------------------------
ARQUIVO: manage.py
--------------------------------------------------------------------------------
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_alfa_montagem.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()


--------------------------------------------------------------------------------
ARQUIVO: utils/geolocation.py
--------------------------------------------------------------------------------
# utils/geolocation.py (crie este arquivo/pasta)
from math import radians, cos, sin, asin, sqrt

def haversine(lon1, lat1, lon2, lat2):
    """
    Calcula a distância em quilômetros entre dois pontos
    na Terra (especificados em graus decimais).
    """
    # Converte graus decimais para radianos
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])

    # Fórmula de Haversine
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a))
    r = 6371 # Raio da Terra em quilômetros
    return c * r

--------------------------------------------------------------------------------
ARQUIVO: utils/__init__.py
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
ARQUIVO: sistema_alfa_montagem/asgi.py
--------------------------------------------------------------------------------
"""
ASGI config for sistema_alfa_montagem project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_alfa_montagem.settings')

application = get_asgi_application()


--------------------------------------------------------------------------------
ARQUIVO: sistema_alfa_montagem/settings.py
--------------------------------------------------------------------------------
"""
Django settings for sistema_alfa_montagem project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-2!dp5!$1_xcg6%m@z$1lb4#99&(2#gryv3n&mnu4__8jc(r0j5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'cloudinary',
    'cloudinary_storage',
    'users.apps.UsersConfig',
    'comissoes.apps.ComissoesConfig',
    'montadores.apps.MontadoresConfig',
    'montagens.apps.MontagensConfig',
]

AUTH_USER_MODEL = 'users.User'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": True,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY, # Reutiliza a SECRET_KEY do Django
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id", # Usa o UUID como identificador do usuário
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",
}

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': config('CLOUDINARY_CLOUD_NAME'),
    'API_KEY': config('CLOUDINARY_API_KEY'),
    'API_SECRET': config('CLOUDINARY_API_SECRET'),
}

DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'sistema_alfa_montagem.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sistema_alfa_montagem.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


--------------------------------------------------------------------------------
ARQUIVO: sistema_alfa_montagem/urls.py
--------------------------------------------------------------------------------
# config/urls.py (arquivo completo)

from django.contrib import admin
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView

from users.views import UserCreateAPIView
from montagens.views import MontagemViewSet
# Importe outras views aqui...

router = DefaultRouter()
router.register(r'montagens', MontagemViewSet, basename='montagem')

urlpatterns = [
    path('admin/', admin.site.urls),
    
    # Auth
    path('api/register/', UserCreateAPIView.as_view(), name='user_register'),
    path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    
    # API endpoints
    path('api/', include(router.urls)),
]

--------------------------------------------------------------------------------
ARQUIVO: sistema_alfa_montagem/wsgi.py
--------------------------------------------------------------------------------
"""
WSGI config for sistema_alfa_montagem project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_alfa_montagem.settings')

application = get_wsgi_application()


--------------------------------------------------------------------------------
ARQUIVO: sistema_alfa_montagem/__init__.py
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
ARQUIVO: montagens/serializers.py
--------------------------------------------------------------------------------
from rest_framework import serializers
from .models import Montagem, ProblemaReportado
from users.serializers import UserSerializer

class MontagemSerializer(serializers.ModelSerializer):
    montador_info = UserSerializer(source='montador', read_only=True)

    class Meta:
        model = Montagem
        fields = '__all__'
        read_only_fields = ('id', 'created_at')

class ProblemaReportadoSerializer(serializers.ModelSerializer):
    class Meta:
        model = ProblemaReportado
        fields = '__all__'

--------------------------------------------------------------------------------
ARQUIVO: montagens/tests.py
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
ARQUIVO: montagens/views.py
--------------------------------------------------------------------------------
# montagens/views.py
from rest_framework import viewsets, permissions, status
from rest_framework.response import Response
from rest_framework.decorators import action
from .models import Montagem
from .serializers import MontagemSerializer
from comissoes.models import Comissao
from utils.geolocation import haversine


class MontagemViewSet(viewsets.ModelViewSet):
    serializer_class = MontagemSerializer

    def get_queryset(self):
        user = self.request.user
        if user.is_montador:
            # Regra: Montador só vê montagens num raio de 50km
            profile = user.montador_profile
            if not profile or not profile.latitude or not profile.longitude:
                return Montagem.objects.none()  # Retorna vazio se o montador não tem localização

            raio_km = 50
            montagens_proximas_ids = []
            montagens_pendentes = Montagem.objects.filter(status='pendente')

            for montagem in montagens_pendentes:
                distancia = haversine(
                    profile.longitude, profile.latitude,
                    montagem.longitude_cliente, montagem.latitude_cliente
                )
                if distancia <= raio_km:
                    montagens_proximas_ids.append(montagem.id)

            return Montagem.objects.filter(id__in=montagens_proximas_ids)

        elif user.is_admin_empresa or user.is_staff:
            # Admin vê todas
            return Montagem.objects.all()

        return Montagem.objects.none()  # Outros usuários não veem montagens

    # Regra: Cálculo automático da comissão (exemplo)
    def perform_create(self, serializer):
        # ...lógica para calcular comissão...
        # Esta lógica seria melhor em um `signal` ou no método `save` do modelo
        montagem = serializer.save()

        # Exemplo simplificado de cálculo de comissão
        try:
            faixa_comissao = Comissao.objects.get(
                faixa_min__lte=montagem.valor,
                faixa_max__gte=montagem.valor
            )
            valor_comissao = (montagem.valor * faixa_comissao.porcentagem) / 100
            print(f"Comissão calculada para a montagem {montagem.id}: R$ {valor_comissao}")
            # Aqui você poderia salvar esse valor em outro campo ou modelo.
        except Comissao.DoesNotExist:
            print(f"Nenhuma faixa de comissão encontrada para o valor R$ {montagem.valor}")

        return Response(serializer.data, status=status.HTTP_201_CREATED)

    # Regra: Admin atribui montagem a um montador disponível
    @action(detail=True, methods=['post'], permission_classes=[permissions.IsAdminUser])
    def atribuir_montador(self, request, pk=None):
        montagem = self.get_object()
        montador_id = request.data.get('montador_id')

        if not montador_id:
            return Response({'error': 'ID do montador é obrigatório.'}, status=status.HTTP_400_BAD_REQUEST)

        # Verificação de disponibilidade (exemplo simples)
        # Uma lógica mais complexa poderia checar a agenda do montador.
        if montagem.status != 'pendente':
            return Response({'error': 'Esta montagem não está pendente.'}, status=status.HTTP_400_BAD_REQUEST)

        montagem.montador_id = montador_id
        montagem.status = 'aceita'
        montagem.save()

        return Response(MontagemSerializer(montagem).data, status=status.HTTP_200_OK)

--------------------------------------------------------------------------------
ARQUIVO: montagens/models.py
--------------------------------------------------------------------------------
# montagens/models.py

import uuid
from django.db import models
from django.conf import settings

class Montagem(models.Model):
    class StatusChoices(models.TextChoices):
        PENDENTE = 'pendente', 'Pendente'
        ACEITA = 'aceita', 'Aceita'
        CONCLUIDA = 'concluida', 'Concluída'
        PROBLEMA = 'problema', 'Com Problema'

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    loja = models.CharField(max_length=100)
    endereco_cliente = models.TextField()
    latitude_cliente = models.DecimalField(max_digits=10, decimal_places=8)
    longitude_cliente = models.DecimalField(max_digits=11, decimal_places=8)
    descricao_movel = models.TextField()
    valor = models.DecimalField(max_digits=10, decimal_places=2)
    data_agendada = models.DateTimeField()
    status = models.CharField(max_length=15, choices=StatusChoices.choices, default=StatusChoices.PENDENTE)
    montador = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='montagens',
        limit_choices_to={'is_montador': True}
    )
    comprovante = models.ImageField(upload_to='comprovantes/', blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Montagem {self.id} - {self.loja}"

class ProblemaReportado(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    montagem = models.ForeignKey(Montagem, on_delete=models.CASCADE, related_name='problemas')
    descricao = models.TextField()
    foto = models.ImageField(upload_to='problemas_fotos/')
    data_reportado = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Problema na Montagem {self.montagem.id}"

--------------------------------------------------------------------------------
ARQUIVO: montagens/admin.py
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
ARQUIVO: montagens/__init__.py
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
ARQUIVO: montagens/apps.py
--------------------------------------------------------------------------------
from django.apps import AppConfig


class MontagensConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'montagens'


--------------------------------------------------------------------------------
ARQUIVO: comissoes/tests.py
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
ARQUIVO: comissoes/views.py
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
ARQUIVO: comissoes/models.py
--------------------------------------------------------------------------------
# comissoes/models.py

import uuid
from django.db import models

class Comissao(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    faixa_min = models.DecimalField(max_digits=10, decimal_places=2, help_text="Valor mínimo da montagem para aplicar esta comissão.")
    faixa_max = models.DecimalField(max_digits=10, decimal_places=2, help_text="Valor máximo da montagem para aplicar esta comissão.")
    porcentagem = models.DecimalField(max_digits=5, decimal_places=2, help_text="Percentual da comissão (ex: 5.00 para 5%).")

    class Meta:
        verbose_name_plural = "Comissões"
        ordering = ['faixa_min']

    def __str__(self):
        return f"Faixa de R${self.faixa_min} a R${self.faixa_max}: {self.porcentagem}%"

--------------------------------------------------------------------------------
ARQUIVO: comissoes/admin.py
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
ARQUIVO: comissoes/__init__.py
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
ARQUIVO: comissoes/apps.py
--------------------------------------------------------------------------------
from django.apps import AppConfig


class ComissoesConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'comissoes'


--------------------------------------------------------------------------------
ARQUIVO: users/serializers.py
--------------------------------------------------------------------------------
from rest_framework import serializers
from .models import User

class UserCreateSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True, required=True, style={'input_type': 'password'})

    class Meta:
        model = User
        fields = ('id', 'email', 'password', 'first_name', 'last_name', 'cpf', 'is_montador')
        read_only_fields = ('id',)

    def create(self, validated_data):
        user = User.objects.create_user(
            username=validated_data['email'], # Usamos o email como username
            email=validated_data['email'],
            password=validated_data['password'],
            first_name=validated_data.get('first_name', ''),
            last_name=validated_data.get('last_name', ''),
            cpf=validated_data.get('cpf'),
            is_montador=validated_data.get('is_montador', False)
        )
        return user

class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'email', 'nome_completo', 'cpf', 'is_montador', 'is_admin_empresa')

--------------------------------------------------------------------------------
ARQUIVO: users/tests.py
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
ARQUIVO: users/views.py
--------------------------------------------------------------------------------
# users/views.py
from rest_framework import generics
from .models import User
from .serializers import UserCreateSerializer
from rest_framework.permissions import AllowAny

class UserCreateAPIView(generics.CreateAPIView):
    queryset = User.objects.all()
    serializer_class = UserCreateSerializer
    permission_classes = [AllowAny] # Permite que qualquer um se cadastre

--------------------------------------------------------------------------------
ARQUIVO: users/models.py
--------------------------------------------------------------------------------
import uuid
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.utils.translation import gettext_lazy as _


class User(AbstractUser):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    email = models.EmailField(_('email address'), unique=True)
    cpf = models.CharField(max_length=14, unique=True, blank=True, null=True)
    is_montador = models.BooleanField(default=False)
    is_admin_empresa = models.BooleanField(default=False)

    USERNAME_FIELD = 'email'
    REQUIRED_FIELDS = ['username', 'first_name', 'last_name']

    def __str__(self):
        return self.get_full_name()

    @property
    def nome_completo(self):
        """Retorna o nome completo do usuário."""
        return f"{self.first_name} {self.last_name}".strip()

--------------------------------------------------------------------------------
ARQUIVO: users/admin.py
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
ARQUIVO: users/__init__.py
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
ARQUIVO: users/apps.py
--------------------------------------------------------------------------------
from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'users'


--------------------------------------------------------------------------------
ARQUIVO: montadores/serializers.py
--------------------------------------------------------------------------------
from rest_framework import serializers
from montadores.models import MontadorProfile

class MontadorProfileSerializer(serializers.ModelSerializer):
    user = serializers.StringRelatedField() # Exibe o nome do usuário
    nome_completo = serializers.CharField(source='user.nome_completo', read_only=True)

    class Meta:
        model = MontadorProfile
        fields = '__all__'

--------------------------------------------------------------------------------
ARQUIVO: montadores/tests.py
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
ARQUIVO: montadores/views.py
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
ARQUIVO: montadores/models.py
--------------------------------------------------------------------------------
# montadores/models.py

import uuid
from django.db import models
from django.conf import settings

class MontadorProfile(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.OneToOneField(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='montador_profile',
        # Garante que apenas usuários marcados como montadores possam ter um perfil
        limit_choices_to={'is_montador': True}
    )
    telefone = models.CharField(max_length=20, blank=True, null=True)
    endereco = models.CharField(max_length=255, blank=True, null=True)
    latitude = models.DecimalField(max_digits=10, decimal_places=8, null=True, blank=True)
    longitude = models.DecimalField(max_digits=11, decimal_places=8, null=True, blank=True)
    ganhos_totais = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    total_montagens = models.PositiveIntegerField(default=0)

    def __str__(self):
        return self.user.nome_completo

--------------------------------------------------------------------------------
ARQUIVO: montadores/admin.py
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
ARQUIVO: montadores/__init__.py
--------------------------------------------------------------------------------


--------------------------------------------------------------------------------
ARQUIVO: montadores/apps.py
--------------------------------------------------------------------------------
from django.apps import AppConfig


class MontadoresConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'montadores'


